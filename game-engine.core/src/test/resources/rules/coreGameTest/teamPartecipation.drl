package eu.trentorise.game.model

import eu.trentorise.game.core.Utility;
import eu.trentorise.game.notification.MessageNotification;
import java.lang.Math;

global Utility utils;

function double getModePoint(String mode) {
    switch(mode) {
   	 case 'Walk':
   		 return 10.0;
   	 case 'Bike':
   		 return 6.0;
   	 case 'Bus':
   		 return 3.75;
   	 case 'Train':
   		 return 2.5;
   	 default:
   		 return 0.0;
    }
}

function double getModeLimit(String mode) {
    switch(mode) {
   	 case 'Walk':
   		 return 10.0;
   	 case 'Bike':
   		 return 25.0;
   	 case 'Bus':
   		 return 40.0;
   	 case 'Train':
   		 return 60.0;
   	 default:
   		 return 0.0;
    }
}

function double getScore(String mode, double distance) {
    double point = getModePoint(mode);
	// HSC special feature: multiply points by 20
	point *= 20;
	double limit = getModeLimit(mode);
	double score = 0.0;
	int index = 0;
      while(index < 8) {
     	 limit /= 2;
     	 score += Math.min(distance, limit) * point;
    	distance -= limit;
    	point /= 2;
    	if (distance < 0) {
        	break;
    	}
    	index++;
      }
	return score;
}

function double tripScore(double modeDaily, double tripDistance, String mode) {
    double beforeTripDistance = modeDaily - tripDistance;
    double oldModeDailyScore = Math.rint(getScore(mode, beforeTripDistance));
    double newModeDailyScore = Math.rint(getScore(mode, modeDaily));
    double gainedScore = newModeDailyScore - oldModeDailyScore;
    return gainedScore;
}

rule "all modes - update green points"
when
    Action($id : id == 'save_itinerary')
    Game( $gameId : id)
    Player($playerId : id, team == false)
    Player($teamId : id, team == true, $totalMembers: totalMembers)

    InputData($travelId : data["travelId"],
          	$walkDistance : data["walkDistance"],
          	$bikeDistance : data["bikeDistance"],
          	$busDistance : data["busDistance"],
          	$trainDistance : data["trainDistance"])

    $greenLeaves : PointConcept( name == "green leaves")

    $walkKm : PointConcept(name == "Walk_Km")
    $bikeKm : PointConcept(name == "Bike_Km")
    $busKm : PointConcept(name == "Bus_Km")
    $trainKm : PointConcept(name == "Train_Km")

    $bc : BadgeCollectionConcept(name == "flags")

then
    utils.log("&&&&&&&&&&&&&& all modes - update green points");
    utils.log($playerId);

    double score = 0.0;

    if($walkDistance != null) {
   	 utils.log("counting Walking Km green points");
   	 double modeDaily = $walkKm.getPeriodCurrentScore("daily");
   	 double gainedScore = tripScore(modeDaily, (double) $walkDistance, "Walk");
   	 utils.log("daily Km: " + modeDaily);
   	 score += gainedScore;
    }

    if($bikeDistance != null) {
   	 utils.log("counting bike Km green points");
   	 double modeDaily = $bikeKm.getPeriodCurrentScore("daily");
   	 double gainedScore = tripScore(modeDaily, (double) $bikeDistance, "Bike");
   	 utils.log("daily Km: " + modeDaily);
   	 score += gainedScore;
    }

    if($busDistance != null) {
   	 utils.log("counting bus Km green points");
   	 double modeDaily = $busKm.getPeriodCurrentScore("daily");
   	 double gainedScore = tripScore(modeDaily, (double) $busDistance, "Bus");
   	 utils.log("daily Km: " + modeDaily);
   	 score += gainedScore;
    }

    if($trainDistance != null) {
   	 utils.log("counting train Km green points");
   	 double modeDaily = $trainKm.getPeriodCurrentScore("daily");
   	 double gainedScore = tripScore(modeDaily, (double) $trainDistance, "Train");
   	 utils.log("daily Km: " + modeDaily);
   	 score += gainedScore;
    }

   /* update player score by number of members in team */
   if ($totalMembers < 1)
        $totalMembers = 1;
    score = score / $totalMembers;

    utils.log("calcultated score: " + score );
    if(score > 0.0) {
   	 $greenLeaves.setScore($greenLeaves.getScore() + score);
   	 update($greenLeaves);
   	 utils.log($greenLeaves);
    } else {
   	 utils.log("No score to update");
    }

    UpdateTeams ut = new UpdateTeams();
    ut.addData("part", score);
    ut.addData("playerId", $playerId);

    /* bonus first partecipation */
    String bnm = "bonus_first_partecipation";
    if (! $bc.getBadgeEarned().contains(bnm)) {
         $bc.getBadgeEarned().add(bnm);
        ut.addData("first_partecipation", true);
    } else {
        ut.addData("first_partecipation", false);
    }

    insert(ut);


end

rule "trip mode update propagation"
when
    Transmission (
        $part: data["part"] != null,
        $playerId: data["playerId"] != null,
        $first_partecipation: data["first_partecipation"] != null
    )

    Player($teamId : id, team == true)
    $greenLeaves : PointConcept( name == "green leaves")

    CustomData (
        $maxMembers : data["maxMembers"] != null
    )
then
	utils.log("@@@@@@@@@@@@@@@@@@@ apply trip mode update propagation");
    utils.log($teamId);
    utils.log($playerId);
    utils.log($first_partecipation);
    utils.log($maxMembers);

    double score = utils.getDouble($part);

    if(score > 0.0) {
   	 $greenLeaves.setScore($greenLeaves.getScore() + score);
   	 update($greenLeaves);
   	 utils.log($greenLeaves);
    } else {
   	 utils.log("No score to update");
    }
end