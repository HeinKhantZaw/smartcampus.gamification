/**
 * Copyright 2018-2019 SmartCommunity Lab(FBK-ICT).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

/*
 * Gamification Engine API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package it.smartcommunitylab.oauth.api;

import java.util.List;

import org.junit.Ignore;
import org.junit.Test;

import it.smartcommunitylab.ApiException;
import it.smartcommunitylab.model.ExecutionDataDTO;
import it.smartcommunitylab.model.Notification;
import it.smartcommunitylab.model.PagePlayerStateDTO;
import it.smartcommunitylab.model.PlayerStateDTO;

/**
 * API tests for DomainMainControllerApi
 */
@Ignore
public class DomainMainControllerApiTest {

    private final DomainMainControllerApi api = new DomainMainControllerApi();

    
    /**
     * Execute an action
     *
     * Execute an action in a game
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void executeActionUsingPOST1Test() throws ApiException {
        String domain = null;
        ExecutionDataDTO data = null;
        api.executeActionUsingPOST1(domain, data);

        // TODO: test validations
    }
    
    /**
     * Get player notifications
     *
     * Get the player notifications of a game
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNotificationUsingGETTest() throws ApiException {
        String domain = null;
        String gameId = null;
        String playerId = null;
        Long timestamp = null;
        List<Notification> response = api.readNotificationUsingGET(domain, gameId, playerId, timestamp);

        // TODO: test validations
    }
    
    /**
     * Get notifications
     *
     * Get the notifications of a game
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNotificationUsingGET1Test() throws ApiException {
        String domain = null;
        String gameId = null;
        Long timestamp = null;
        List<Notification> response = api.readNotificationUsingGET1(domain, gameId, timestamp);

        // TODO: test validations
    }
    
    /**
     * Get player state
     *
     * Get the state of a player in a game
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readPlayerStateUsingGETTest() throws ApiException {
        String domain = null;
        String gameId = null;
        String playerId = null;
        PlayerStateDTO response = api.readPlayerStateUsingGET(domain, gameId, playerId);

        // TODO: test validations
    }
    
    /**
     * Get player states
     *
     * Get the state of players in a game filter by optional player name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readPlayerStateUsingGET1Test() throws ApiException {
        String domain = null;
        String gameId = null;
        String playerFilter = null;
        String page = null;
        String size = null;
        PagePlayerStateDTO response = api.readPlayerStateUsingGET1(domain, gameId, playerFilter, page, size);

        // TODO: test validations
    }
    
}
