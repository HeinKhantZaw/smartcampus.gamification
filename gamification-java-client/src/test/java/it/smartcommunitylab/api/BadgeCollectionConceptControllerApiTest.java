/*
 * Gamification Engine API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package it.smartcommunitylab.api;

import java.util.List;

import org.junit.Ignore;
import org.junit.Test;

import it.smartcommunitylab.ApiException;
import it.smartcommunitylab.model.BadgeCollectionConcept;

/**
 * API tests for BadgeCollectionConceptControllerApi
 */
@Ignore
public class BadgeCollectionConceptControllerApiTest {

    private final BadgeCollectionConceptControllerApi api = new BadgeCollectionConceptControllerApi();

    
    /**
     * Add a badge collection
     *
     * Add a badge collection to the game definition
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addBadgeUsingPOSTTest() throws ApiException {
        String gameId = null;
        BadgeCollectionConcept badge = null;
        api.addBadgeUsingPOST(gameId, badge);

        // TODO: test validations
    }
    
    /**
     * Delete a badge collection
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBadgeCollectionUsingDELETETest() throws ApiException {
        String gameId = null;
        String collectionId = null;
        api.deleteBadgeCollectionUsingDELETE(gameId, collectionId);

        // TODO: test validations
    }
    
    /**
     * Get a badge collection
     *
     * Get the definition of a badge collection in a game
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readBadgeCollectionUsingGETTest() throws ApiException {
        String gameId = null;
        String collectionId = null;
        BadgeCollectionConcept response = api.readBadgeCollectionUsingGET(gameId, collectionId);

        // TODO: test validations
    }
    
    /**
     * Get the badge collections
     *
     * Get badge collections in a game
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readBadgeCollectionsUsingGETTest() throws ApiException {
        String gameId = null;
        List<BadgeCollectionConcept> response = api.readBadgeCollectionsUsingGET(gameId);

        // TODO: test validations
    }
    
    /**
     * Update a badge collection
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBadgeCollectionUsingPUTTest() throws ApiException {
        String gameId = null;
        api.updateBadgeCollectionUsingPUT(gameId);

        // TODO: test validations
    }
    
}
