/**
 * Copyright 2018-2019 SmartCommunity Lab(FBK-ICT).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

/*
 * Gamification Engine API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package it.smartcommunitylab.basic.api;

import java.util.List;

import org.junit.Ignore;
import org.junit.Test;

import it.smartcommunitylab.ApiException;
import it.smartcommunitylab.model.Collectionstring;
import it.smartcommunitylab.model.TeamDTO;

/**
 * API tests for TeamControllerApi
 */
@Ignore
public class TeamControllerApiTest {

    private final TeamControllerApi api = new TeamControllerApi();

    
    /**
     * Add team member
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addTeamMemberUsingPUTTest() throws ApiException {
        String gameId = null;
        String teamId = null;
        String playerId = null;
        List<String> members = null;
        api.addTeamMemberUsingPUT(gameId, teamId, playerId, members);

        // TODO: test validations
    }
    
    /**
     * Create team
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTeamUsingPOST1Test() throws ApiException {
        String gameId = null;
        TeamDTO team = null;
        api.createTeamUsingPOST1(gameId, team);

        // TODO: test validations
    }
    
    /**
     * Delte team
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTeamUsingDELETE1Test() throws ApiException {
        String gameId = null;
        String teamId = null;
        api.deleteTeamUsingDELETE1(gameId, teamId);

        // TODO: test validations
    }
    
    /**
     * Get team members
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readTeamMembersUsingGETTest() throws ApiException {
        String gameId = null;
        String teamId = null;
        Collectionstring response = api.readTeamMembersUsingGET(gameId, teamId);

        // TODO: test validations
    }
    
    /**
     * Delete team member
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeTeamMemberUsingDELETETest() throws ApiException {
        String gameId = null;
        String teamId = null;
        String playerId = null;
        List<String> members = null;
        api.removeTeamMemberUsingDELETE(gameId, teamId, playerId, members);

        // TODO: test validations
    }
    
    /**
     * Edit team
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTeamMembersUsingPUTTest() throws ApiException {
        String gameId = null;
        String teamId = null;
        List<String> members = null;
        api.updateTeamMembersUsingPUT(gameId, teamId, members);

        // TODO: test validations
    }
    
}
