/**
 * Copyright 2018-2019 SmartCommunity Lab(FBK-ICT).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

/*
 * Gamification Engine API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package it.smartcommunitylab.oauth.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;

import it.smartcommunitylab.ApiCallback;
import it.smartcommunitylab.ApiClient;
import it.smartcommunitylab.ApiException;
import it.smartcommunitylab.ApiResponse;
import it.smartcommunitylab.Configuration;
import it.smartcommunitylab.Pair;
import it.smartcommunitylab.ProgressRequestBody;
import it.smartcommunitylab.ProgressResponseBody;
import it.smartcommunitylab.model.ExecutionDataDTO;
import it.smartcommunitylab.model.Notification;
import it.smartcommunitylab.model.PagePlayerStateDTO;
import it.smartcommunitylab.model.PlayerStateDTO;

public class DomainMainControllerApi {
    private ApiClient apiClient;

    public DomainMainControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DomainMainControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for executeActionUsingPOST1
     * @param domain domain (required)
     * @param data data (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call executeActionUsingPOST1Call(String domain, ExecutionDataDTO data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/api/{domain}/gengine/execute"
            .replaceAll("\\{" + "domain" + "\\}", apiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call executeActionUsingPOST1ValidateBeforeCall(String domain, ExecutionDataDTO data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling executeActionUsingPOST1(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling executeActionUsingPOST1(Async)");
        }
        

        com.squareup.okhttp.Call call = executeActionUsingPOST1Call(domain, data, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Execute an action
     * Execute an action in a game
     * @param domain domain (required)
     * @param data data (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void executeActionUsingPOST1(String domain, ExecutionDataDTO data) throws ApiException {
        executeActionUsingPOST1WithHttpInfo(domain, data);
    }

    /**
     * Execute an action
     * Execute an action in a game
     * @param domain domain (required)
     * @param data data (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> executeActionUsingPOST1WithHttpInfo(String domain, ExecutionDataDTO data) throws ApiException {
        com.squareup.okhttp.Call call = executeActionUsingPOST1ValidateBeforeCall(domain, data, null, null);
        return apiClient.execute(call);
    }

    /**
     * Execute an action (asynchronously)
     * Execute an action in a game
     * @param domain domain (required)
     * @param data data (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call executeActionUsingPOST1Async(String domain, ExecutionDataDTO data, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = executeActionUsingPOST1ValidateBeforeCall(domain, data, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for readNotificationUsingGET
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param timestamp timestamp (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call readNotificationUsingGETCall(String domain, String gameId, String playerId, Long timestamp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/{domain}/gengine/notification/{gameId}/{playerId}"
            .replaceAll("\\{" + "domain" + "\\}", apiClient.escapeString(domain.toString()))
            .replaceAll("\\{" + "gameId" + "\\}", apiClient.escapeString(gameId.toString()))
            .replaceAll("\\{" + "playerId" + "\\}", apiClient.escapeString(playerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readNotificationUsingGETValidateBeforeCall(String domain, String gameId, String playerId, Long timestamp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling readNotificationUsingGET(Async)");
        }
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling readNotificationUsingGET(Async)");
        }
        
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling readNotificationUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = readNotificationUsingGETCall(domain, gameId, playerId, timestamp, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get player notifications
     * Get the player notifications of a game
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param timestamp timestamp (optional)
     * @return List&lt;Notification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public List<Notification> readNotificationUsingGET(String domain, String gameId, String playerId, Long timestamp) throws ApiException {
        ApiResponse<List<Notification>> resp = readNotificationUsingGETWithHttpInfo(domain, gameId, playerId, timestamp);
        return resp.getData();
    }

    /**
     * Get player notifications
     * Get the player notifications of a game
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param timestamp timestamp (optional)
     * @return ApiResponse&lt;List&lt;Notification&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<List<Notification>> readNotificationUsingGETWithHttpInfo(String domain, String gameId, String playerId, Long timestamp) throws ApiException {
        com.squareup.okhttp.Call call = readNotificationUsingGETValidateBeforeCall(domain, gameId, playerId, timestamp, null, null);
        Type localVarReturnType = new TypeToken<List<Notification>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get player notifications (asynchronously)
     * Get the player notifications of a game
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param timestamp timestamp (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call readNotificationUsingGETAsync(String domain, String gameId, String playerId, Long timestamp, final ApiCallback<List<Notification>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readNotificationUsingGETValidateBeforeCall(domain, gameId, playerId, timestamp, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Notification>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readNotificationUsingGET1
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param timestamp timestamp (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call readNotificationUsingGET1Call(String domain, String gameId, Long timestamp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/{domain}/gengine/notification/{gameId}"
            .replaceAll("\\{" + "domain" + "\\}", apiClient.escapeString(domain.toString()))
            .replaceAll("\\{" + "gameId" + "\\}", apiClient.escapeString(gameId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (timestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timestamp", timestamp));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readNotificationUsingGET1ValidateBeforeCall(String domain, String gameId, Long timestamp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling readNotificationUsingGET1(Async)");
        }
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling readNotificationUsingGET1(Async)");
        }
        

        com.squareup.okhttp.Call call = readNotificationUsingGET1Call(domain, gameId, timestamp, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get notifications
     * Get the notifications of a game
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param timestamp timestamp (optional)
     * @return List&lt;Notification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public List<Notification> readNotificationUsingGET1(String domain, String gameId, Long timestamp) throws ApiException {
        ApiResponse<List<Notification>> resp = readNotificationUsingGET1WithHttpInfo(domain, gameId, timestamp);
        return resp.getData();
    }

    /**
     * Get notifications
     * Get the notifications of a game
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param timestamp timestamp (optional)
     * @return ApiResponse&lt;List&lt;Notification&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<List<Notification>> readNotificationUsingGET1WithHttpInfo(String domain, String gameId, Long timestamp) throws ApiException {
        com.squareup.okhttp.Call call = readNotificationUsingGET1ValidateBeforeCall(domain, gameId, timestamp, null, null);
        Type localVarReturnType = new TypeToken<List<Notification>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get notifications (asynchronously)
     * Get the notifications of a game
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param timestamp timestamp (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call readNotificationUsingGET1Async(String domain, String gameId, Long timestamp, final ApiCallback<List<Notification>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readNotificationUsingGET1ValidateBeforeCall(domain, gameId, timestamp, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Notification>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readPlayerStateUsingGET
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readPlayerStateUsingGETCall(String domain, String gameId, String playerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/{domain}/gengine/state/{gameId}/{playerId}"
            .replaceAll("\\{" + "domain" + "\\}", apiClient.escapeString(domain.toString()))
            .replaceAll("\\{" + "gameId" + "\\}", apiClient.escapeString(gameId.toString()))
            .replaceAll("\\{" + "playerId" + "\\}", apiClient.escapeString(playerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readPlayerStateUsingGETValidateBeforeCall(String domain, String gameId, String playerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling readPlayerStateUsingGET(Async)");
        }
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling readPlayerStateUsingGET(Async)");
        }
        
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling readPlayerStateUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = readPlayerStateUsingGETCall(domain, gameId, playerId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get player state
     * Get the state of a player in a game
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @return PlayerStateDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PlayerStateDTO readPlayerStateUsingGET(String domain, String gameId, String playerId) throws ApiException {
        ApiResponse<PlayerStateDTO> resp = readPlayerStateUsingGETWithHttpInfo(domain, gameId, playerId);
        return resp.getData();
    }

    /**
     * Get player state
     * Get the state of a player in a game
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @return ApiResponse&lt;PlayerStateDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PlayerStateDTO> readPlayerStateUsingGETWithHttpInfo(String domain, String gameId, String playerId) throws ApiException {
        com.squareup.okhttp.Call call = readPlayerStateUsingGETValidateBeforeCall(domain, gameId, playerId, null, null);
        Type localVarReturnType = new TypeToken<PlayerStateDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get player state (asynchronously)
     * Get the state of a player in a game
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param playerId playerId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readPlayerStateUsingGETAsync(String domain, String gameId, String playerId, final ApiCallback<PlayerStateDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readPlayerStateUsingGETValidateBeforeCall(domain, gameId, playerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PlayerStateDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readPlayerStateUsingGET1
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param playerFilter playerFilter (optional)
     * @param page Results page you want to retrieve  (optional)
     * @param size Number of records per page. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readPlayerStateUsingGET1Call(String domain, String gameId, String playerFilter, String page, String size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/{domain}/gengine/state/{gameId}"
            .replaceAll("\\{" + "domain" + "\\}", apiClient.escapeString(domain.toString()))
            .replaceAll("\\{" + "gameId" + "\\}", apiClient.escapeString(gameId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (playerFilter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("playerFilter", playerFilter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readPlayerStateUsingGET1ValidateBeforeCall(String domain, String gameId, String playerFilter, String page, String size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling readPlayerStateUsingGET1(Async)");
        }
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling readPlayerStateUsingGET1(Async)");
        }
        

        com.squareup.okhttp.Call call = readPlayerStateUsingGET1Call(domain, gameId, playerFilter, page, size, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get player states
     * Get the state of players in a game filter by optional player name
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param playerFilter playerFilter (optional)
     * @param page Results page you want to retrieve  (optional)
     * @param size Number of records per page. (optional)
     * @return PagePlayerStateDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PagePlayerStateDTO readPlayerStateUsingGET1(String domain, String gameId, String playerFilter, String page, String size) throws ApiException {
        ApiResponse<PagePlayerStateDTO> resp = readPlayerStateUsingGET1WithHttpInfo(domain, gameId, playerFilter, page, size);
        return resp.getData();
    }

    /**
     * Get player states
     * Get the state of players in a game filter by optional player name
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param playerFilter playerFilter (optional)
     * @param page Results page you want to retrieve  (optional)
     * @param size Number of records per page. (optional)
     * @return ApiResponse&lt;PagePlayerStateDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PagePlayerStateDTO> readPlayerStateUsingGET1WithHttpInfo(String domain, String gameId, String playerFilter, String page, String size) throws ApiException {
        com.squareup.okhttp.Call call = readPlayerStateUsingGET1ValidateBeforeCall(domain, gameId, playerFilter, page, size, null, null);
        Type localVarReturnType = new TypeToken<PagePlayerStateDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get player states (asynchronously)
     * Get the state of players in a game filter by optional player name
     * @param domain domain (required)
     * @param gameId gameId (required)
     * @param playerFilter playerFilter (optional)
     * @param page Results page you want to retrieve  (optional)
     * @param size Number of records per page. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readPlayerStateUsingGET1Async(String domain, String gameId, String playerFilter, String page, String size, final ApiCallback<PagePlayerStateDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readPlayerStateUsingGET1ValidateBeforeCall(domain, gameId, playerFilter, page, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PagePlayerStateDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
